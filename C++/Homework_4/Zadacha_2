#include <iostream>
#include <stdexcept>

class Product {
public:

    Product(double price, double weight) : price(price), weight(weight) {
        if (price <= 0 || weight <= 0) {
            throw std::invalid_argument("Цена и вес должны быть положительными числами.");
        }
    }

    double getTotalPrice() const {
        return price * weight;
    }

protected:
    double price;
    double weight;
};

class Apple : public Product {
public:
    Apple(double price, double weight, std::string variety) : Product(price, weight), variety(variety) {
        if (variety.empty()) {
            throw std::invalid_argument("Сорт яблока не может быть пустым.");
        }
    }

    std::string getVariety() const {
        return variety;
    }

private:
    std::string variety;
};

class Orange : public Product {
public:
    Orange(double price, double weight, std::string origin) : Product(price, weight), origin(origin) {
        if (origin.empty()) {
            throw std::invalid_argument("Страна происхождения апельсина не может быть пустой.");
        }
    }

    std::string getOrigin() const {
        return origin;
    }

private:
    std::string origin;
};

int main() {
    try {
    } catch (const std::invalid_argument& e) {
        std::cerr << "Ошибка при создании яблока: " << e.what() << std::endl;
    }

    try {
        Orange orange(2.5, -150, "Spain");
    } catch (const std::invalid_argument& e) {
        std::cerr << "Ошибка при создании апельсина: " << e.what() << std::endl;
    }

    try {
        Orange orange(2.5, 150, "");
    } catch (const std::invalid_argument& e) {
        std::cerr << "Ошибка при создании апельсина: " << e.what() << std::endl;
    }

    return 0;
}
